// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         Int         @id @default(autoincrement())
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  postDetail PostDetail?
  savedPosts SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         Int     @id @default(autoincrement())
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     Int     @unique
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int      @unique
  postId    Int      @unique
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  username     String         @unique
  password     String
  avatar       String?
  createdAt    DateTime       @default(now())
  posts        Post[]
  savedPosts   SavedPost[]
  userChats    UserChat[]
  RefreshToken RefreshToken[]
}

model Chat {
  id          Int        @id @default(autoincrement())
  users       UserChat[]
  createdAt   DateTime   @default(now())
  seenBy      String[]
  messages    Message[]
  lastMessage String?
}

model UserChat {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  @@id([userId, chatId])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  version   Int      @default(1)
  createdAt DateTime @default(now())
}
